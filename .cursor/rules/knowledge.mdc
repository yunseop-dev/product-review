---
description: 
globs: 
---
# Next.js와 TanStack Query 통합 시 주의해야 할 핵심 사항

Next.js와 TanStack Query는 강력한 조합을 이루지만, 효과적으로 통합하려면 여러 중요한 측면을 고려해야 합니다. 이 두 기술을 함께 사용할 때 발생할 수 있는 잠재적 문제점과 최적의 사용 방법에 대해 알아보겠습니다.

## 서버와 클라이언트 환경에서의 QueryClient 생성 차이

Next.js와 TanStack Query를 함께 사용할 때 가장 먼저 고려해야 할 점은 QueryClient 인스턴스의 생성 방식입니다. 서버와 클라이언트 환경에서 QueryClient를 다르게 처리해야 합니다.

서버 환경에서는 매 요청마다 새로운 QueryClient 인스턴스를 생성해야 합니다. 서버에서 QueryClient를 싱글톤으로 유지하면 모든 사용자가 동일한 QueryClient를 공유하게 되어 심각한 문제가 발생할 수 있습니다. 다른 사용자들의 민감한 데이터가 유출될 위험이 있으며, 성능에도 좋지 않습니다[5].

```jsx
// 절대 이렇게 하지 마세요:
// const queryClient = new QueryClient() // 파일 루트 레벨에서 생성

export default function MyApp({ Component, pageProps }) {
  // 대신 이렇게 하세요. 각 요청마다 자체 캐시를 갖도록 보장합니다:
  const [queryClient] = React.useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000,
      },
    },
  }))
  
  // ...
}
```

반면 클라이언트 환경에서는 각 유저가 매번 QueryClient를 새로 생성할 필요가 없기 때문에 싱글톤으로 유지할 수 있습니다[5]. 이를 위해 TanStack Query는 서버와 클라이언트를 구분하는 도구를 제공합니다.

```jsx
function getQueryClient() {
  if (isServer) {
    // 서버: 항상 새로운 query client 생성
    return makeQueryClient()
  } else {
    // 브라우저: 이미 있는 경우 새로 만들지 않음
    browserQueryClient = browserQueryClient ?? makeQueryClient()
    return browserQueryClient
  }
}
```

## 서버 컴포넌트와 클라이언트 컴포넌트의 구분

Next.js의 App Router를 사용할 때는 서버 컴포넌트와 클라이언트 컴포넌트를 명확히 구분해야 합니다. TanStack Query는 React의 Context API를 사용하기 때문에 클라이언트 컴포넌트에서만 사용할 수 있습니다[8].

클라이언트 컴포넌트에서 TanStack Query를 사용하려면 파일 상단에 'use client' 지시문을 추가해야 합니다. 또한 HydrationBoundary 컴포넌트도 클라이언트 컴포넌트이므로 서버에서 prefetch한 데이터를 클라이언트로 전달할 때 사용됩니다[6].

```jsx
// app/posts/page.jsx
import { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'
import Posts from './posts'

export default async function PostsPage() {
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery({
    queryKey: ['posts'],
    queryFn: getPosts,
  })

  return (
    // HydrationBoundary는 클라이언트 컴포넌트임
    
      
    
  )
}
```

## 데이터 불일치 문제와 staleTime 설정

SSR 환경에서는 일반적으로 기본 staleTime을 0 이상으로 설정하여 클라이언트에서 즉시 refetch하는 것을 방지해야 합니다[3]. 하지만 이로 인해 다른 문제가 발생할 수 있습니다.

서버에서 prefetch한 쿼리의 staleTime이 지나서 클라이언트에서 재검증이 필요할 때, 서버 컴포넌트에서 발생한 쿼리를 재검증할 방법이 없습니다. 이로 인해 서버 컴포넌트에서 렌더링된 데이터와 클라이언트에서 refetch된 데이터 사이에 불일치가 발생할 수 있습니다[5].

예를 들어, 서버 컴포넌트에서 게시물 목록을 렌더링하고 그 길이를 표시했지만, 클라이언트에서 데이터를 새로 가져오면 실제 데이터와 서버 컴포넌트에서 표시한 `posts.length` 사이에 불일치가 발생할 수 있습니다.

```jsx
// app/posts/page.jsx
export default async function PostsPage() {
  const queryClient = new QueryClient()
  const posts = await queryClient.fetchQuery({
    queryKey: ['posts'],
    queryFn: getPosts,
  })

  return (
    
      {/* 서버에서 렌더링된 이 부분은 클라이언트에서 데이터가 변경되어도 업데이트되지 않음 */}
      게시물 수: {posts.length}
      
    
  )
}
```

## 개인화된 요청과 개인화되지 않은 요청 구분

데이터 페칭 전략을 세울 때 개인화된 요청과 개인화되지 않은 요청을 구분하는 것이 중요합니다[1].

개인화되지 않은 요청(모든 사용자에게 동일한 데이터)은 서버 사이드에서 fetch의 `force-cache` 옵션을 사용하여 API를 호출하고, 적절한 방법을 통해 갱신하는 것이 좋습니다. 반면 개인화된 요청(사용자별로 다른 데이터)은 클라이언트 사이드에서 TanStack Query를 사용하여 브라우저 메모리에 캐시하고 queryKey와 staleTime으로 캐시를 관리하는 것이 적합합니다[1].

이러한 전략은 검색 엔진 최적화와도 관련이 있습니다. 개인화된 요청은 검색 엔진에 노출될 필요가 없으므로 클라이언트 사이드에서 처리하는 것이 좋습니다[1].

## Next.js 캐싱 메커니즘과의 상호작용

Next.js의 App Router를 사용할 때는 Next.js의 자체 캐싱 메커니즘과 TanStack Query의 캐싱 메커니즘이 어떻게 상호작용하는지 이해하는 것이 중요합니다.

서버 컴포넌트에서 `no-store` 옵션을 설정하면 새로고침 및 라우트 캐시가 만료될 때마다 API 호출이 발생합니다. 이때 클라이언트 사이드에서 TanStack Query를 사용하여 브라우저 메모리에 개인화된 요청에 대한 응답을 캐시하고 queryKey와 staleTime으로 캐시를 관리할 수 있습니다[1].

```jsx
// 서버 컴포넌트에서
const data = await fetch('https://api.example.com/data', { cache: 'no-store' });

// 클라이언트 컴포넌트에서
const { data } = useQuery({
  queryKey: ['data'],
  queryFn: fetchData,
  staleTime: 1000 * 60 * 5, // 5분
});
```

## 특수 사용 사례 고려

특정 기능을 구현할 때 Next.js의 서버 컴포넌트와 TanStack Query 중 어느 것을 사용할지 결정해야 합니다.

일반적으로 데이터를 서버에서 가져올 수 있으면 서버 컴포넌트를 사용하는 것이 좋습니다. 그러나 무한 스크롤, 페이지네이션 등 클라이언트 사이드에서 데이터를 가져와야 하는 기능에는 TanStack Query가 여전히
유용합니다[7].

예를 들어, 무한 스크롤을 구현하는 페이지의 경우, 초기 데이터는 서버에서 prefetch하고, 추가 데이터는 클라이언트에서 TanStack Query의 `useInfiniteQuery`를 사용하여 처리할 수 있습니다[4].

```jsx
// 서버 컴포넌트에서 초기 데이터 prefetch
await queryClient.prefetchInfiniteQuery({
  queryKey: ['comments', boardId],
  queryFn: ({ pageParam = 1 }) => getComments(boardId, pageParam),
  initialPageParam: 1,
});

// 클라이언트 컴포넌트에서 무한 스크롤 구현
const { data, fetchNextPage, hasNextPage } = useInfiniteQuery({
  queryKey: ['comments', boardId],
  queryFn: ({ pageParam = 1 }) => getComments(boardId, pageParam),
  initialPageParam: 1,
  getNextPageParam: (lastPage) => lastPage.nextPage,
});
```

## 결론

Next.js와 TanStack Query를 함께 사용할 때는 서버와 클라이언트 환경의 차이, 데이터 불일치 문제, 캐싱 전략, 그리고 특수 사용 사례 등 여러 측면을 고려해야 합니다. 두 기술의 장점을 최대한 활용하되, 각각의 한계와 주의점을 이해하고 적절히 대응하는 것이 중요합니다.

특히, 서버에서는 매 요청마다 새로운 QueryClient를 생성하고, 개인화된 요청과 개인화되지 않은 요청을 구분하여 처리하며, 서버 컴포넌트와 클라이언트 컴포넌트를 명확히 구분하는 것이 중요합니다. 또한, 데이터 불일치 문제를 인식하고 이에 대한 적절한 전략을 수립해야 합니다.

이러한 주의점들을 고려하여 Next.js와 TanStack Query를 통합한다면, 서버 사이드 렌더링의 장점과 클라이언트 사이드 데이터 관리의 유연성을 모두 활용하는 효율적인 애플리케이션을 구축할 수 있을 것입니다.

Citations:
[1] https://eun-history.tistory.com/2
[2] https://codingmax.net/courses/ko-react-query/section03/lec0027
[3] https://tanstack.com/query/latest/docs/framework/react/guides/ssr
[4] https://jjang-j.tistory.com/153
[5] https://velog.io/@haryan248/next-with-react-query
[6] https://velog.io/@ienrum/next.js-%EC%97%90%EC%84%9C-tanstack-query-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0
[7] https://www.reddit.com/r/nextjs/comments/1gstaey/do_you_use_tanstack_query/
[8] https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr
[9] https://cwdeveloper.tistory.com/61
[10] https://velog.io/@limelimejiwon/Next.JS%EC%97%90%EC%84%9C-React-Query-v4-SSR-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0
[11] https://blog.logrocket.com/using-tanstack-query-next-js/
[12] https://tanstack.com/query/v4/docs/react/guides/ssr
[13] https://mongsira.tistory.com/57
[14] https://seogeurim.tistory.com/19
[15] https://dev.to/frontenddeveli/simple-mutations-with-tanstack-query-and-nextjs-4b0m
[16] https://velog.io/@shrewslampe/Next.js%EC%99%80-React-Query%EB%A1%9C-SSR-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0
[17] https://github.com/ssi02014/react-query-tutorial
[18] https://www.mintmin.dev/blog/2404/20240427
[19] https://github.com/TanStack/query/issues/6560
[20] https://www.reddit.com/r/nextjs/comments/1ftbpwa/tanstack_query/